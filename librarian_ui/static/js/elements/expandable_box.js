// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

(function(window, $) {
  var Element, ExpandableBox;
  Element = window.o.elements.Element;
  ExpandableBox = (function(superClass) {
    extend(ExpandableBox, superClass);

    function ExpandableBox(id) {
      this.id = id;
      ExpandableBox.__super__.constructor.call(this, this.id);
      this.collapsed = true;
      this.collapsibleElement = this.getCollapsible;
      this.activatorElement = this.getActivator();
      this.activatorElement.on('click', (function(_this) {
        return function() {
          return _this.toggle();
        };
      })(this));
    }

    ExpandableBox.prototype.collapsibleSection = '.o-collapsible';

    ExpandableBox.prototype.activator = '.o-activator';

    ExpandableBox.prototype.getCollapsible = function() {
      if (this.collapsibleSection === 'self') {
        return this.element;
      } else {
        return this.element.find(this.collapsibleSection);
      }
    };

    ExpandableBox.prototype.getActivator = function() {
      return this.element.find(this.activator);
    };

    ExpandableBox.prototype.toggle = function(cond) {
      cond = cond != null ? cond : this.collapsed;
      this.element.toggleClass('open', cond);
      this.collapsed = !cond;
      this.updateAria();
      if (this.collapsed) {
        return this.onClose();
      } else {
        return this.onOpen();
      }
    };

    ExpandableBox.prototype.open = function() {
      return this.toggle(true);
    };

    ExpandableBox.prototype.close = function() {
      return this.toggle(false);
    };

    ExpandableBox.prototype.onOpen = function() {
      return true;
    };

    ExpandableBox.prototype.onClose = function() {
      return true;
    };

    ExpandableBox.prototype.updateAria = function() {
      return this.ariaProperty('expanded', !this.collapsed, this.collapsibleElement);
    };

    return ExpandableBox;

  })(Element);
  return window["export"]('ExpandableBox', 'elements', ExpandableBox);
})(this, this.jQuery);
